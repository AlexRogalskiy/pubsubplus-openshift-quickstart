apiVersion: v1
kind: Template
metadata:
  name: solace-springboot-autoconfig
  namespace: spring-boot
  annotations:
    description: Sample Spring Boot Application connecting to a Solace VMR using Auto Configuration
    iconClass: icon-jboss
    tags: 'instant-app,springboot,gradle,java'
objects:
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: '${APPLICATION_NAME}'
    spec:
      triggers:
        - type: GitHub
          github:
            secret: '${GITHUB_TRIGGER_SECRET}'
        - type: Generic
          generic:
            secret: '${GENERIC_TRIGGER_SECRET}'
        - type: ImageChange
          imageChange: {}
      source:
        type: Git
        git:
          uri: '${GIT_URI}'
          ref: '${GIT_REF}'
        sourceSecret:
          name: '${GIT_SECRET}'
        contextDir: '${CONTEXT_DIR}'
      strategy:
        type: Source
        sourceStrategy:
          from:
            kind: ImageStreamTag
            name: 's2i-java:latest'
      output:
        to:
          kind: ImageStreamTag
          name: '${APPLICATION_NAME}:latest'
      resources: {}
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: '${APPLICATION_NAME}'
    spec:
      dockerImageRepository: ''
      tags:
        - name: latest
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: '${APPLICATION_NAME}'
    spec:
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 600
        resources: {}
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - '${APPLICATION_NAME}'
            from:
              kind: ImageStreamTag
              name: '${APPLICATION_NAME}:latest'
      replicas: 1
      selector:
        deploymentconfig: '${APPLICATION_NAME}'
      template:
        metadata:
          labels:
            deploymentconfig: '${APPLICATION_NAME}'
        spec:
          containers:
            - name: '${APPLICATION_NAME}'
              image: '${APPLICATION_NAME}'
              ports:
                - containerPort: 8080
                  protocol: TCP
              livenessProbe:
                tcpSocket:
                  port: 8080
                initialDelaySeconds: 30
                timeoutSeconds: 1
              resources: {}
              terminationMessagePath: /dev/termination-log
              imagePullPolicy: IfNotPresent
              securityContext:
                capabilities: {}
                privileged: false
          restartPolicy: Always
          dnsPolicy: ClusterFirst
  - kind: Route
    apiVersion: v1
    metadata:
      name: '${APPLICATION_NAME}'
    spec:
      host: '${APPLICATION_HOSTNAME}'
      to:
        kind: Service
        name: '${APPLICATION_NAME}'
  - kind: Service
    apiVersion: v1
    metadata:
      name: '${APPLICATION_NAME}'
    spec:
      ports:
        - name: '${APPLICATION_NAME}-http'
          port: 8080
          targetPort: 8080
      selector:
        deploymentconfig: '${APPLICATION_NAME}'
      type: ClusterIP
      sessionAffinity: None
parameters:
  - name: APPLICATION_NAME
    displayName: Application name
    description: The name for the application.
    value: solace-sample
    required: true
  - name: APPLICATION_HOSTNAME
    displayName: Application hostname
    description: >-
      Custom hostname for service routes.  Leave blank for default hostname,
      e.g.: <application-name>.<project>.<default-domain-suffix>
    value: solace-sample.apps.openshift.dickey.cloud
  - name: GIT_URI
    description: Git source URI for application
    value: 'https://github.com/SolaceDev/SolaceJmsSpringBoot.git'
  - name: GIT_REF
    description: Git branch/tag reference
    value: master
  - name: GIT_SECRET
    description: Name of the Secret Object for GIT
    value: basicsecret
  - name: CONTEXT_DIR
    description: Git Directory
  - name: GITHUB_TRIGGER_SECRET
    description: Github trigger secret
    generate: expression
    from: '[a-zA-Z0-9]{8}'
  - name: GENERIC_TRIGGER_SECRET
    description: Generic build trigger secret
    generate: expression
    from: '[a-zA-Z0-9]{8}'
labels:
  application: springboot-helloworld-gradle
  createdBy: template-springboot-helloworld-gradle
